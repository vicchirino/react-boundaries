{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { BaseBackend } from '@sentry/core';\nimport { Severity } from '@sentry/types';\nimport { addExceptionTypeValue, isDOMError, isDOMException, isError, isErrorEvent, isPlainObject, supportsFetch, SyncPromise } from '@sentry/utils';\nimport { eventFromPlainObject, eventFromStacktrace, prepareFramesForEvent } from './parsers';\nimport { _computeStackTrace } from './tracekit';\nimport { FetchTransport, XHRTransport } from './transports';\n/**\n * The Sentry Browser SDK Backend.\n * @hidden\n */\n\nvar BrowserBackend =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(BrowserBackend, _super);\n\n  function BrowserBackend() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  BrowserBackend.prototype._setupTransport = function () {\n    if (!this._options.dsn) {\n      // We return the noop transport here in case there is no Dsn.\n      return _super.prototype._setupTransport.call(this);\n    }\n\n    var transportOptions = this._options.transportOptions ? this._options.transportOptions : {\n      dsn: this._options.dsn\n    };\n\n    if (this._options.transport) {\n      return new this._options.transport(transportOptions);\n    }\n\n    if (supportsFetch()) {\n      return new FetchTransport(transportOptions);\n    }\n\n    return new XHRTransport(transportOptions);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BrowserBackend.prototype.eventFromException = function (exception, hint) {\n    var _this = this;\n\n    var event;\n\n    if (isErrorEvent(exception) && exception.error) {\n      // If it is an ErrorEvent with `error` property, extract it to get actual Error\n      var errorEvent = exception;\n      exception = errorEvent.error; // tslint:disable-line:no-parameter-reassignment\n\n      event = eventFromStacktrace(_computeStackTrace(exception));\n      return SyncPromise.resolve(this._buildEvent(event, hint));\n    }\n\n    if (isDOMError(exception) || isDOMException(exception)) {\n      // If it is a DOMError or DOMException (which are legacy APIs, but still supported in some browsers)\n      // then we just extract the name and message, as they don't provide anything else\n      // https://developer.mozilla.org/en-US/docs/Web/API/DOMError\n      // https://developer.mozilla.org/en-US/docs/Web/API/DOMException\n      var domException = exception;\n      var name_1 = domException.name || (isDOMError(domException) ? 'DOMError' : 'DOMException');\n      var message_1 = domException.message ? name_1 + \": \" + domException.message : name_1;\n      return this.eventFromMessage(message_1, Severity.Error, hint).then(function (messageEvent) {\n        addExceptionTypeValue(messageEvent, message_1);\n        return SyncPromise.resolve(_this._buildEvent(messageEvent, hint));\n      });\n    }\n\n    if (isError(exception)) {\n      // we have a real Error object, do nothing\n      event = eventFromStacktrace(_computeStackTrace(exception));\n      return SyncPromise.resolve(this._buildEvent(event, hint));\n    }\n\n    if (isPlainObject(exception) && hint && hint.syntheticException) {\n      // If it is plain Object, serialize it manually and extract options\n      // This will allow us to group events based on top-level keys\n      // which is much better than creating new group when any key/value change\n      var objectException = exception;\n      event = eventFromPlainObject(objectException, hint.syntheticException);\n      addExceptionTypeValue(event, 'Custom Object', undefined, {\n        handled: true,\n        synthetic: true,\n        type: 'generic'\n      });\n      event.level = Severity.Error;\n      return SyncPromise.resolve(this._buildEvent(event, hint));\n    } // If none of previous checks were valid, then it means that\n    // it's not a DOMError/DOMException\n    // it's not a plain Object\n    // it's not a valid ErrorEvent (one with an error property)\n    // it's not an Error\n    // So bail out and capture it as a simple message:\n\n\n    var stringException = exception;\n    return this.eventFromMessage(stringException, undefined, hint).then(function (messageEvent) {\n      addExceptionTypeValue(messageEvent, \"\" + stringException, undefined, {\n        handled: true,\n        synthetic: true,\n        type: 'generic'\n      });\n      messageEvent.level = Severity.Error;\n      return SyncPromise.resolve(_this._buildEvent(messageEvent, hint));\n    });\n  };\n  /**\n   * This is an internal helper function that creates an event.\n   */\n\n\n  BrowserBackend.prototype._buildEvent = function (event, hint) {\n    return tslib_1.__assign({}, event, {\n      event_id: hint && hint.event_id\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BrowserBackend.prototype.eventFromMessage = function (message, level, hint) {\n    if (level === void 0) {\n      level = Severity.Info;\n    }\n\n    var event = {\n      event_id: hint && hint.event_id,\n      level: level,\n      message: message\n    };\n\n    if (this._options.attachStacktrace && hint && hint.syntheticException) {\n      var stacktrace = _computeStackTrace(hint.syntheticException);\n\n      var frames_1 = prepareFramesForEvent(stacktrace.stack);\n      event.stacktrace = {\n        frames: frames_1\n      };\n    }\n\n    return SyncPromise.resolve(event);\n  };\n\n  return BrowserBackend;\n}(BaseBackend);\n\nexport { BrowserBackend };","map":null,"metadata":{},"sourceType":"module"}