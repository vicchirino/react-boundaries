{"ast":null,"code":"import * as tslib_1 from \"tslib\";\n/**\n * Consumes the promise and logs the error when it rejects.\n * @param promise A promise to forget.\n */\n\nexport function forget(promise) {\n  promise.catch(function (e) {\n    // TODO: Use a better logging mechanism\n    console.error(e);\n  });\n}\n/**\n * Helper to filter an array with asynchronous callbacks.\n *\n * @param array An array containing items to filter.\n * @param predicate An async predicate evaluated on every item.\n * @param thisArg Optional value passed as \"this\" into the callback.\n * @returns An array containing only values where the callback returned true.\n */\n\nexport function filterAsync(array, predicate, thisArg) {\n  return tslib_1.__awaiter(this, void 0, void 0, function () {\n    var verdicts;\n    return tslib_1.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , Promise.all(array.map(predicate, thisArg))];\n\n        case 1:\n          verdicts = _a.sent();\n          return [2\n          /*return*/\n          , array.filter(function (_, index) {\n            return verdicts[index];\n          })];\n      }\n    });\n  });\n}","map":null,"metadata":{},"sourceType":"module"}