{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { API, getCurrentHub } from '@sentry/core';\nimport { Severity } from '@sentry/types';\nimport { fill, getEventDescription, getGlobalObject, isString, logger, normalize, parseUrl, safeJoin, supportsHistory, supportsNativeFetch } from '@sentry/utils';\nimport { breadcrumbEventHandler, keypressEventHandler, wrap } from '../helpers';\nvar global = getGlobalObject();\nvar lastHref;\n/** Default Breadcrumbs instrumentations */\n\nvar Breadcrumbs =\n/** @class */\nfunction () {\n  /**\n   * @inheritDoc\n   */\n  function Breadcrumbs(options) {\n    /**\n     * @inheritDoc\n     */\n    this.name = Breadcrumbs.id;\n    this._options = tslib_1.__assign({\n      console: true,\n      dom: true,\n      fetch: true,\n      history: true,\n      sentry: true,\n      xhr: true\n    }, options);\n  }\n  /** JSDoc */\n\n\n  Breadcrumbs.prototype._instrumentConsole = function () {\n    if (!('console' in global)) {\n      return;\n    }\n\n    ['debug', 'info', 'warn', 'error', 'log', 'assert'].forEach(function (level) {\n      if (!(level in global.console)) {\n        return;\n      }\n\n      fill(global.console, level, function (originalConsoleLevel) {\n        return function () {\n          var args = [];\n\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n\n          var breadcrumbData = {\n            category: 'console',\n            data: {\n              extra: {\n                arguments: normalize(args, 3)\n              },\n              logger: 'console'\n            },\n            level: Severity.fromString(level),\n            message: safeJoin(args, ' ')\n          };\n\n          if (level === 'assert') {\n            if (args[0] === false) {\n              breadcrumbData.message = \"Assertion failed: \" + (safeJoin(args.slice(1), ' ') || 'console.assert');\n              breadcrumbData.data.extra.arguments = normalize(args.slice(1), 3);\n            }\n          }\n\n          Breadcrumbs.addBreadcrumb(breadcrumbData, {\n            input: args,\n            level: level\n          }); // this fails for some browsers. :(\n\n          if (originalConsoleLevel) {\n            Function.prototype.apply.call(originalConsoleLevel, global.console, args);\n          }\n        };\n      });\n    });\n  };\n  /** JSDoc */\n\n\n  Breadcrumbs.prototype._instrumentDOM = function () {\n    if (!('document' in global)) {\n      return;\n    } // Capture breadcrumbs from any click that is unhandled / bubbled up all the way\n    // to the document. Do this before we instrument addEventListener.\n\n\n    global.document.addEventListener('click', breadcrumbEventHandler('click'), false);\n    global.document.addEventListener('keypress', keypressEventHandler(), false); // After hooking into document bubbled up click and keypresses events, we also hook into user handled click & keypresses.\n\n    ['EventTarget', 'Node'].forEach(function (target) {\n      var proto = global[target] && global[target].prototype;\n\n      if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n        return;\n      }\n\n      fill(proto, 'addEventListener', function (original) {\n        return function (eventName, fn, options) {\n          if (fn && fn.handleEvent) {\n            if (eventName === 'click') {\n              fill(fn, 'handleEvent', function (innerOriginal) {\n                return function (event) {\n                  breadcrumbEventHandler('click')(event);\n                  return innerOriginal.call(this, event);\n                };\n              });\n            }\n\n            if (eventName === 'keypress') {\n              fill(fn, 'handleEvent', keypressEventHandler());\n            }\n          } else {\n            if (eventName === 'click') {\n              breadcrumbEventHandler('click', true)(this);\n            }\n\n            if (eventName === 'keypress') {\n              keypressEventHandler()(this);\n            }\n          }\n\n          return original.call(this, eventName, fn, options);\n        };\n      });\n      fill(proto, 'removeEventListener', function (original) {\n        return function (eventName, fn, options) {\n          var callback = fn;\n\n          try {\n            callback = callback && (callback.__sentry_wrapped__ || callback);\n          } catch (e) {// ignore, accessing __sentry_wrapped__ will throw in some Selenium environments\n          }\n\n          return original.call(this, eventName, callback, options);\n        };\n      });\n    });\n  };\n  /** JSDoc */\n\n\n  Breadcrumbs.prototype._instrumentFetch = function () {\n    if (!supportsNativeFetch()) {\n      return;\n    }\n\n    fill(global, 'fetch', function (originalFetch) {\n      return function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        var fetchInput = args[0];\n        var method = 'GET';\n        var url;\n\n        if (typeof fetchInput === 'string') {\n          url = fetchInput;\n        } else if ('Request' in global && fetchInput instanceof Request) {\n          url = fetchInput.url;\n\n          if (fetchInput.method) {\n            method = fetchInput.method;\n          }\n        } else {\n          url = String(fetchInput);\n        }\n\n        if (args[1] && args[1].method) {\n          method = args[1].method;\n        }\n\n        var client = getCurrentHub().getClient();\n        var dsn = client && client.getDsn();\n\n        if (dsn) {\n          var filterUrl = new API(dsn).getStoreEndpoint(); // if Sentry key appears in URL, don't capture it as a request\n          // but rather as our own 'sentry' type breadcrumb\n\n          if (filterUrl && url.includes(filterUrl)) {\n            if (method === 'POST' && args[1] && args[1].body) {\n              addSentryBreadcrumb(args[1].body);\n            }\n\n            return originalFetch.apply(global, args);\n          }\n        }\n\n        var fetchData = {\n          method: method,\n          url: url\n        };\n        return originalFetch.apply(global, args).then(function (response) {\n          fetchData.status_code = response.status;\n          Breadcrumbs.addBreadcrumb({\n            category: 'fetch',\n            data: fetchData,\n            type: 'http'\n          }, {\n            input: args,\n            response: response\n          });\n          return response;\n        }).catch(function (error) {\n          Breadcrumbs.addBreadcrumb({\n            category: 'fetch',\n            data: fetchData,\n            level: Severity.Error,\n            type: 'http'\n          }, {\n            error: error,\n            input: args\n          });\n          throw error;\n        });\n      };\n    });\n  };\n  /** JSDoc */\n\n\n  Breadcrumbs.prototype._instrumentHistory = function () {\n    var _this = this;\n\n    if (!supportsHistory()) {\n      return;\n    }\n\n    var captureUrlChange = function (from, to) {\n      var parsedLoc = parseUrl(global.location.href);\n      var parsedTo = parseUrl(to);\n      var parsedFrom = parseUrl(from); // Initial pushState doesn't provide `from` information\n\n      if (!parsedFrom.path) {\n        parsedFrom = parsedLoc;\n      } // because onpopstate only tells you the \"new\" (to) value of location.href, and\n      // not the previous (from) value, we need to track the value of the current URL\n      // state ourselves\n\n\n      lastHref = to; // Use only the path component of the URL if the URL matches the current\n      // document (almost all the time when using pushState)\n\n      if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n        // tslint:disable-next-line:no-parameter-reassignment\n        to = parsedTo.relative;\n      }\n\n      if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n        // tslint:disable-next-line:no-parameter-reassignment\n        from = parsedFrom.relative;\n      }\n\n      Breadcrumbs.addBreadcrumb({\n        category: 'navigation',\n        data: {\n          from: from,\n          to: to\n        }\n      });\n    }; // record navigation (URL) changes\n\n\n    var oldOnPopState = global.onpopstate;\n\n    global.onpopstate = function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      var currentHref = global.location.href;\n      captureUrlChange(lastHref, currentHref);\n\n      if (oldOnPopState) {\n        return oldOnPopState.apply(_this, args);\n      }\n    };\n    /**\n     * @hidden\n     */\n\n\n    function historyReplacementFunction(originalHistoryFunction) {\n      // note history.pushState.length is 0; intentionally not declaring\n      // params to preserve 0 arity\n      return function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        var url = args.length > 2 ? args[2] : undefined; // url argument is optional\n\n        if (url) {\n          // coerce to string (this is what pushState does)\n          captureUrlChange(lastHref, String(url));\n        }\n\n        return originalHistoryFunction.apply(this, args);\n      };\n    }\n\n    fill(global.history, 'pushState', historyReplacementFunction);\n    fill(global.history, 'replaceState', historyReplacementFunction);\n  };\n  /** JSDoc */\n\n\n  Breadcrumbs.prototype._instrumentXHR = function () {\n    if (!('XMLHttpRequest' in global)) {\n      return;\n    }\n    /**\n     * @hidden\n     */\n\n\n    function wrapProp(prop, xhr) {\n      // TODO: Fix XHR types\n      if (prop in xhr && typeof xhr[prop] === 'function') {\n        fill(xhr, prop, function (original) {\n          return wrap(original, {\n            mechanism: {\n              data: {\n                function: prop,\n                handler: original && original.name || '<anonymous>'\n              },\n              handled: true,\n              type: 'instrument'\n            }\n          });\n        });\n      }\n    }\n\n    var xhrproto = XMLHttpRequest.prototype;\n    fill(xhrproto, 'open', function (originalOpen) {\n      return function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        var url = args[1];\n        this.__sentry_xhr__ = {\n          method: args[0],\n          url: args[1]\n        };\n        var client = getCurrentHub().getClient();\n        var dsn = client && client.getDsn();\n\n        if (dsn) {\n          var filterUrl = new API(dsn).getStoreEndpoint(); // if Sentry key appears in URL, don't capture it as a request\n          // but rather as our own 'sentry' type breadcrumb\n\n          if (isString(url) && filterUrl && url.includes(filterUrl)) {\n            this.__sentry_own_request__ = true;\n          }\n        }\n\n        return originalOpen.apply(this, args);\n      };\n    });\n    fill(xhrproto, 'send', function (originalSend) {\n      return function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        var xhr = this; // tslint:disable-line:no-this-assignment\n\n        if (xhr.__sentry_own_request__) {\n          addSentryBreadcrumb(args[0]);\n        }\n        /**\n         * @hidden\n         */\n\n\n        function onreadystatechangeHandler() {\n          if (xhr.readyState === 4) {\n            if (xhr.__sentry_own_request__) {\n              return;\n            }\n\n            try {\n              // touching statusCode in some platforms throws\n              // an exception\n              if (xhr.__sentry_xhr__) {\n                xhr.__sentry_xhr__.status_code = xhr.status;\n              }\n            } catch (e) {\n              /* do nothing */\n            }\n\n            Breadcrumbs.addBreadcrumb({\n              category: 'xhr',\n              data: xhr.__sentry_xhr__,\n              type: 'http'\n            }, {\n              xhr: xhr\n            });\n          }\n        }\n\n        ['onload', 'onerror', 'onprogress'].forEach(function (prop) {\n          wrapProp(prop, xhr);\n        });\n\n        if ('onreadystatechange' in xhr && typeof xhr.onreadystatechange === 'function') {\n          fill(xhr, 'onreadystatechange', function (original) {\n            return wrap(original, {\n              mechanism: {\n                data: {\n                  function: 'onreadystatechange',\n                  handler: original && original.name || '<anonymous>'\n                },\n                handled: true,\n                type: 'instrument'\n              }\n            }, onreadystatechangeHandler);\n          });\n        } else {\n          // if onreadystatechange wasn't actually set by the page on this xhr, we\n          // are free to set our own and capture the breadcrumb\n          xhr.onreadystatechange = onreadystatechangeHandler;\n        }\n\n        return originalSend.apply(this, args);\n      };\n    });\n  };\n  /**\n   * Helper that checks if integration is enabled on the client.\n   * @param breadcrumb Breadcrumb\n   * @param hint BreadcrumbHint\n   */\n\n\n  Breadcrumbs.addBreadcrumb = function (breadcrumb, hint) {\n    if (getCurrentHub().getIntegration(Breadcrumbs)) {\n      getCurrentHub().addBreadcrumb(breadcrumb, hint);\n    }\n  };\n  /**\n   * Instrument browser built-ins w/ breadcrumb capturing\n   *  - Console API\n   *  - DOM API (click/typing)\n   *  - XMLHttpRequest API\n   *  - Fetch API\n   *  - History API\n   */\n\n\n  Breadcrumbs.prototype.setupOnce = function () {\n    if (this._options.console) {\n      this._instrumentConsole();\n    }\n\n    if (this._options.dom) {\n      this._instrumentDOM();\n    }\n\n    if (this._options.xhr) {\n      this._instrumentXHR();\n    }\n\n    if (this._options.fetch) {\n      this._instrumentFetch();\n    }\n\n    if (this._options.history) {\n      this._instrumentHistory();\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Breadcrumbs.id = 'Breadcrumbs';\n  return Breadcrumbs;\n}();\n\nexport { Breadcrumbs };\n/** JSDoc */\n\nfunction addSentryBreadcrumb(serializedData) {\n  // There's always something that can go wrong with deserialization...\n  try {\n    var event_1 = JSON.parse(serializedData);\n    Breadcrumbs.addBreadcrumb({\n      category: 'sentry',\n      event_id: event_1.event_id,\n      level: event_1.level || Severity.fromString('error'),\n      message: getEventDescription(event_1)\n    }, {\n      event: event_1\n    });\n  } catch (_oO) {\n    logger.error('Error while adding sentry type breadcrumb');\n  }\n}","map":null,"metadata":{},"sourceType":"module"}